"""
Django settings for a stream project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

from webcam.utils import ThreadNameFilter

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'os*hqvscy)s#9m!u0kcr-^_$)8@upg94&-bi9oso*=rrvx6$&x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '0.0.0.0', '192.168.11.232', '127.0.0.1', '192.168.1.9', '86.121.91.161', '46.97.168.7', 'smart-intersection.go.ro', 'raspberrypizero2w-tcp.at.remote.it']
# ALLOWED_HOSTS = ['0.0.0.0']

SITE_URL = "http://0.0.0.0:8000"

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'channels',
    'webcam.apps.WebcamConfig'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stream.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        # 'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stream.wsgi.application'
ASGI_APPLICATION = 'stream.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [(os.environ["REDIS_HOST"], os.environ["REDIS_PORT"])],
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    }
}

# DATABASE_ROUTERS = ["django_mongodb_backend.routers.MongoRouter"]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Bucharest'

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'thread_name': {
            '()': ThreadNameFilter,
        }
    },
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {threadName} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'main_thread_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'main_thread.log', # Log file for main thread
            'formatter': 'verbose',
            'filters': ['thread_name'], # Apply filter
        },
        'background_thread_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'background_thread.log', # Log file for background thread
            'formatter': 'verbose',
            'filters': ['thread_name'], # Apply filter
        },
        'console_main': { # For viewing the main thread in one console
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['thread_name'],
            'stream': 'ext://sys.stdout', # Default output
        },
        'console_background': { # For viewing background thread in another console (conceptually)
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['thread_name'],
            # This is tricky for direct terminal separation from within one Python process
            # We'll handle terminal separation externally.
        }
    },
    'loggers': {
        'django': {
            'handlers': ['main_thread_file'], # Django's default logs
            'level': 'INFO',
            'propagate': True,
        },
        'app_main_thread_logger': { # Logger for your main thread code
            'handlers': ['main_thread_file', 'console_main'],
            'level': 'DEBUG',
            'propagate': False,
            'filters': ['thread_name'], # Ensure filter is applied
        },
        'app_background_thread_logger': { # Logger for your background thread code
            'handlers': ['background_thread_file', 'console_background'],
            'level': 'DEBUG',
            'propagate': False,
            'filters': ['thread_name'], # Ensure filter is applied
        },
    },
    # This root logger will catch anything not explicitly handled,
    # but we want to ensure our thread-specific loggers are used.
    'root': {
        'handlers': ['main_thread_file'], # Default to the main thread log
        'level': 'WARNING',
    },
}
