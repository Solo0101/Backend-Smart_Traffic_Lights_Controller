services:
  nginx:
    image: 'docker.io/jc21/nginx-proxy-manager:latest'
    container_name: 'nginx-proxy-manager'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ../nginx-proxy-manager/data:/data
      - ../nginx-proxy-manager/letsencrypt:/etc/letsencrypt

  redis:
    image: redis:alpine
    container_name: redis_cache
    network_mode: "host"
    restart: unless-stopped
    ports:
      - "6380"
    volumes:
      - ../redis_data:/data
    command:
      - "--port 6380"
    depends_on:
      nginx:
        condition: service_started

  django-yolo-streaming:
      build:
        dockerfile: Dockerfile
      image: 'django-yolo-streaming:latest'
      container_name: 'django-yolo-streaming'
      network_mode: "host"
      restart: unless-stopped
      ports:
        - "8000:8000"
      command:
        - /bin/sh
        - '-c'
        - '/app/run.sh'
      depends_on:
        redis:
          condition: service_started
        postgresql:
#          condition: service_started
          condition: service_healthy
          restart: true
      env_file: "./.env"
      deploy:
        resources:
            reservations:
              devices:
                  - driver: nvidia
                    device_ids: [ all ]
                    capabilities: [ gpu, compute, utility ]
      volumes:
        - ./:/app

  postgresql:
      image: postgis/postgis:17-3.5-alpine
      container_name: 'postgresql'
      restart: always
      ports:
          - '5432:5432'
      volumes:
          - ../postgresql/dbdata:/data/db
      env_file: "./.env"
      environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
        interval: 10s
        timeout: 10s
        retries: 5
        start_period: 30s


volumes:
  postgresql: